0327
ajax 전송 후 success시 document.write를 하면 페이지를 다시 씀
->innerHTML을 사용하여 태그 안의 내용을 바꾸는 것으로 변경.
ajax 비동기식 통신을 하고 싶으면 button은 submit type을 쓰면 안됨.
비동기식 통신을 하면 url은 변화하지 않음
-> 현재 보고 있는 월을 url로 표시해 주기(추후 새로고침을 했을 때 그 월을 유지하기 위함)
->history.replaceState를 사용해서 url 변경
->ajax안 파라미터 중 url은 http://localhost:8080/~와 같이 전체 경로를 사용할 수 있음.
@PathVariable을 사용해서 요청 url에 있는 값 추출
테이블 태그 안에 tr태그안에 td안에 table을 넣어야 인식한다. 그래서 주를 그릴때 div로 나눠서 거기서 표를 그려야한다..
jquery의 선택자를 이용하면 특정 속성을 가진 태그를 조작할 수 있다.

0328
resources파일에 넣어야 찾아갈 수 있다.
-> /파일

서버는 상태 정보를 가지고 있으면 안된다.
클라이언트가 정보를 들고 있어야 함.
->자바에서 멤버 변수를 사용하면 안됨.
->서버에서 클라이언트에 전송. h2같은데에 안보이게 해서

0329
쿠키는 사용자가 브라우저의 쿠키데이터를 비우거나 금지하지 않는 한 남아있음.
세션은 방문자가 접속해 세션이 발생되고 지정된 시간이 지나 세션 종료시 내용도 삭제.

0401
table-layout:fixed를 해야 칸 너비가 고정.
min-width를 이용해서 화면이 작아져도 더 작아지지 않게
flex-wrap:nowrap으로 하면 레이아웃 안바뀜
클로저
http://chanlee.github.io/2013/12/10/understand-javascript-closure/
위 참고.
클로저를 이용하면 다른 함수내의 데이터를 사용할 수 있다.

+추가 표 width에 따라 표 줄 삭제
colNum으로 줄 조절

0402
controller에서 googleCalendarService를 사용할땐 try catch로. throws말고.
특정 값을 리턴해주고 싶으면 @ResponseBody를 쓰고 자료형 써야함
z-index는 클수록 앞으로 온다.
alert를 사용해서 한번 멈춰주는게 좋다?

button을 submit으로 해줘야 화면의 이동이 나타난다.

ajax통신시 dataType과 type 조심

시간이 있는 일정 중 오전 일정 값을 그대로 날짜 선택기 값으로 집어넣으면 그 전날 값이 나온다..
9시 보다 늦은 시간이어야 달력에 맞는 날짜가 찍힌다.

+추가  api인증받은 메일이 캘린더에 대한 권한이 없으면 수정,삭제 등에 오류가 생긴다....
simplecalendar-261@soy-storm-198708.iam.gserviceaccount.com
calendar@soy-storm-198708.iam.gserviceaccount.com

0403
*** SCOPES을 CALENDAR로 바꿔야 수정 가능.
->수정하고 crenditial 다 지우기.

위의 이메일 주소 추가는 딱히 안해도 되는 듯?
(서비스 계정)

form 태그에 accept-charset="UTF-8"을 해줘야 한글이 깨지지 않고 잘 간다.

클로저를 사용하니깐 클릭이벤트시 실행되는 함수를 외부함수로 하고 내부함수도 클릭이벤트시 실행되는 함수가 되면 외부 함수가 클릭 할때마다 쌓이게 되고 내부함수가 실행되면 클릭 되었던 외부함수들이 다 실행되게 됨.
--> 외부 함수가 먼저 실행되었던 순서대로 실행.
(원래는 일정의 제목을 누르면 실행되는 함수 안에 제목을 누를 시 나오는 삭제 버튼에 대한 이벤트를 받는 함수를 넣어놓았는데 위의 경우가 발생함.
일정 제목을 누르면 나오는 화면 안 삭제 버튼에 필요정보(calendarId, eventId를 저장))

종일과 그날 23시59분 간의 차이는 53940000 이다 여기에 1만 더해서 종일은 아래로!

종일과 그날 0시0분 간의 차이는 32400000 이다. 여기에 -1만 해도 종일은 위로 간다.

밀리초 = 시간*3600000

0404
relative, absolute관계에서 absolute포지션의 위치에 구간을 줄 때는 relative의 width, height크기를 이용해야 한다.

0405
인증을 여러번 하게 된다.. service를 저장하지 않고 Google Calendar API로 요청할때 마다 불러옴.
https://opentutorials.org/course/2473/16571
이사이트를 통해 구글 API인증 방법인 Oauth에 관해 공부함.
설명이 잘 나와있음

 URL Decoder, Encoder를 사용하면 url 파라미터로 사용할 수 있게 변환 시켜줌

0408
목록같이 스크롤이 아래로 낸려가는 경우에는 container, contents의 height를 auto로
스크롤 움직이면 안되는건 100%

0409
recurrence를 각각 하나의 이벤트로 안보는 이유는 다른 프로그램?과의 통일성을 위함이다.
Date객체를 받아 그대로 사용하면 여러 객체에서 해당 객체를 사용할 경우 Date객체의 값이 변경 될 수 있다.
그래서 방어 복사를 해야한다.
this.endTime = new Date(endTime.getTime()); 과 같이 되여야 함.

0410
여러 캘린더의 이벤트 리스트를 얻기위해 전에는 순차적으로 요청해서 시간이 느렸음.
쓰레드를 사용하여 동시에 호출해서 리스트를 얻게함. 시간이 500ms~700ms으로 줄음. 원래는 1초 초반대
http://seongtak-yoon.tistory.com/59
-> Executor, callable을 이용해 어떻게 쓰레드의 결과값을 반환할지 알려줌
http://hamait.tistory.com/612
->fakejoinpool에 대해 자세히 설명해줌. fakejoinpool은 thread pool에서 놀고 있는 쓰레드를 골라 바쁜 쓰레드의 일을 떼어서 주는 것
http://palpit.tistory.com/732
->쓰레드 풀 설명
http://happyourlife.tistory.com/135?category=577163
->쓰레드 동기화 시 어느 메모리?에서 동기화가 이뤄지는지
http://jdm.kr/blog/72
->thread 와 runnable 차이. runnable이 implements를 사용해서 추후 클래스를 더 상속 받을 수 있다

반복 일정인 경우 시작 날짜가 현재 보고 있는 월보다 전이어도 일정에는 들어온다. 단지 시작 날짜가 처음 매주 토요일을 시작한 날짜로 되어있어서 계속 이어져있을뿐
EventDTO에 recurrence 정보 추가해야할듯

//submit 엔터키 막기
$("*").keypress(function(e){
	if(e.keyCode == 13){
		return false;
	}
});

ajax로 전달할때 javascript에서 json 만들때 
var input = new Object();
	input.summary = $("#summary").val().toString();
	input.startDate = $("#startDatePicker").val().toString();
	input.startDateTime = $("#startTimePicker").val().toString();
	input.endDate = $("#endDatePicker").val().toString();
	input.endDateTime = $("#endTimePicker").val().toString();
	input.allDay = $("#allDayCheckBox").is(":checked").toString();
	input.location = $("#location").val().toString();
	input.description = $("#description").text().toString();
	var size = $("[data-alarmNum]").attr("data-alarmNum");
	
	var overrides = new Array();
	/*
	for(var i=0;i<size;i++){
		var override = new Object();
		override.method = $("[name='overrides["+i+"].method']").val().toString();
		override.minutes = ($("[name='overrides["+i+"].minutes']").val());
		overrides.push(override);
	}
	input.overrides = overrides;
	*/
	input.calendars = $("#calendarList").val().toString();
	input.eventId = $("#eventId").val().toString();
	input.calendarId = $("#calendarId").val().toString();
d이렇게만 해서 input 을 전달해줘도 됨..

0412
history.replaceState(data,"SimpleCalendar",pageUrl);
이렇게 하면 뒤로가기 했을때 남아 있지 않음..
pushState 이용

http://yamea-guide.tistory.com/51
여기 참고해서 ajax사용시 뒤로, 앞으로 가기 구현
data 있는지 보고 있으면 ajax 재요청

http://babolsk.tistory.com/1067
여기 참고해서 JSON 데이터 보내는거 구현